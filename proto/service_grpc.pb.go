// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EndPointCryptosClient is the client API for EndPointCryptos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EndPointCryptosClient interface {
	CreateCrypto(ctx context.Context, in *CreateCryptoReq, opts ...grpc.CallOption) (*CryptoCurrency, error)
	EditCrypto(ctx context.Context, in *EditCryptoReq, opts ...grpc.CallOption) (*CryptoCurrency, error)
	DeleteCrypo(ctx context.Context, in *DeleteCryptoReq, opts ...grpc.CallOption) (*DefaultResp, error)
	FindCrypto(ctx context.Context, in *FindCryptoReq, opts ...grpc.CallOption) (*CryptoCurrency, error)
	ListAllCryptos(ctx context.Context, in *SortCryptosReq, opts ...grpc.CallOption) (*ListCryptosResp, error)
	Upvote(ctx context.Context, in *VoteReq, opts ...grpc.CallOption) (*DefaultResp, error)
	Downvote(ctx context.Context, in *VoteReq, opts ...grpc.CallOption) (*DefaultResp, error)
	MonitorVotes(ctx context.Context, in *MonitorVotesReq, opts ...grpc.CallOption) (EndPointCryptos_MonitorVotesClient, error)
}

type endPointCryptosClient struct {
	cc grpc.ClientConnInterface
}

func NewEndPointCryptosClient(cc grpc.ClientConnInterface) EndPointCryptosClient {
	return &endPointCryptosClient{cc}
}

func (c *endPointCryptosClient) CreateCrypto(ctx context.Context, in *CreateCryptoReq, opts ...grpc.CallOption) (*CryptoCurrency, error) {
	out := new(CryptoCurrency)
	err := c.cc.Invoke(ctx, "/proto.EndPointCryptos/CreateCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endPointCryptosClient) EditCrypto(ctx context.Context, in *EditCryptoReq, opts ...grpc.CallOption) (*CryptoCurrency, error) {
	out := new(CryptoCurrency)
	err := c.cc.Invoke(ctx, "/proto.EndPointCryptos/EditCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endPointCryptosClient) DeleteCrypo(ctx context.Context, in *DeleteCryptoReq, opts ...grpc.CallOption) (*DefaultResp, error) {
	out := new(DefaultResp)
	err := c.cc.Invoke(ctx, "/proto.EndPointCryptos/DeleteCrypo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endPointCryptosClient) FindCrypto(ctx context.Context, in *FindCryptoReq, opts ...grpc.CallOption) (*CryptoCurrency, error) {
	out := new(CryptoCurrency)
	err := c.cc.Invoke(ctx, "/proto.EndPointCryptos/FindCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endPointCryptosClient) ListAllCryptos(ctx context.Context, in *SortCryptosReq, opts ...grpc.CallOption) (*ListCryptosResp, error) {
	out := new(ListCryptosResp)
	err := c.cc.Invoke(ctx, "/proto.EndPointCryptos/ListAllCryptos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endPointCryptosClient) Upvote(ctx context.Context, in *VoteReq, opts ...grpc.CallOption) (*DefaultResp, error) {
	out := new(DefaultResp)
	err := c.cc.Invoke(ctx, "/proto.EndPointCryptos/Upvote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endPointCryptosClient) Downvote(ctx context.Context, in *VoteReq, opts ...grpc.CallOption) (*DefaultResp, error) {
	out := new(DefaultResp)
	err := c.cc.Invoke(ctx, "/proto.EndPointCryptos/Downvote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endPointCryptosClient) MonitorVotes(ctx context.Context, in *MonitorVotesReq, opts ...grpc.CallOption) (EndPointCryptos_MonitorVotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &EndPointCryptos_ServiceDesc.Streams[0], "/proto.EndPointCryptos/MonitorVotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &endPointCryptosMonitorVotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EndPointCryptos_MonitorVotesClient interface {
	Recv() (*CryptoCurrency, error)
	grpc.ClientStream
}

type endPointCryptosMonitorVotesClient struct {
	grpc.ClientStream
}

func (x *endPointCryptosMonitorVotesClient) Recv() (*CryptoCurrency, error) {
	m := new(CryptoCurrency)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EndPointCryptosServer is the server API for EndPointCryptos service.
// All implementations must embed UnimplementedEndPointCryptosServer
// for forward compatibility
type EndPointCryptosServer interface {
	CreateCrypto(context.Context, *CreateCryptoReq) (*CryptoCurrency, error)
	EditCrypto(context.Context, *EditCryptoReq) (*CryptoCurrency, error)
	DeleteCrypo(context.Context, *DeleteCryptoReq) (*DefaultResp, error)
	FindCrypto(context.Context, *FindCryptoReq) (*CryptoCurrency, error)
	ListAllCryptos(context.Context, *SortCryptosReq) (*ListCryptosResp, error)
	Upvote(context.Context, *VoteReq) (*DefaultResp, error)
	Downvote(context.Context, *VoteReq) (*DefaultResp, error)
	MonitorVotes(*MonitorVotesReq, EndPointCryptos_MonitorVotesServer) error
	mustEmbedUnimplementedEndPointCryptosServer()
}

// UnimplementedEndPointCryptosServer must be embedded to have forward compatible implementations.
type UnimplementedEndPointCryptosServer struct {
}

func (UnimplementedEndPointCryptosServer) CreateCrypto(context.Context, *CreateCryptoReq) (*CryptoCurrency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCrypto not implemented")
}
func (UnimplementedEndPointCryptosServer) EditCrypto(context.Context, *EditCryptoReq) (*CryptoCurrency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCrypto not implemented")
}
func (UnimplementedEndPointCryptosServer) DeleteCrypo(context.Context, *DeleteCryptoReq) (*DefaultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCrypo not implemented")
}
func (UnimplementedEndPointCryptosServer) FindCrypto(context.Context, *FindCryptoReq) (*CryptoCurrency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCrypto not implemented")
}
func (UnimplementedEndPointCryptosServer) ListAllCryptos(context.Context, *SortCryptosReq) (*ListCryptosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllCryptos not implemented")
}
func (UnimplementedEndPointCryptosServer) Upvote(context.Context, *VoteReq) (*DefaultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upvote not implemented")
}
func (UnimplementedEndPointCryptosServer) Downvote(context.Context, *VoteReq) (*DefaultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Downvote not implemented")
}
func (UnimplementedEndPointCryptosServer) MonitorVotes(*MonitorVotesReq, EndPointCryptos_MonitorVotesServer) error {
	return status.Errorf(codes.Unimplemented, "method MonitorVotes not implemented")
}
func (UnimplementedEndPointCryptosServer) mustEmbedUnimplementedEndPointCryptosServer() {}

// UnsafeEndPointCryptosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EndPointCryptosServer will
// result in compilation errors.
type UnsafeEndPointCryptosServer interface {
	mustEmbedUnimplementedEndPointCryptosServer()
}

func RegisterEndPointCryptosServer(s grpc.ServiceRegistrar, srv EndPointCryptosServer) {
	s.RegisterService(&EndPointCryptos_ServiceDesc, srv)
}

func _EndPointCryptos_CreateCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCryptoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndPointCryptosServer).CreateCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndPointCryptos/CreateCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndPointCryptosServer).CreateCrypto(ctx, req.(*CreateCryptoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndPointCryptos_EditCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCryptoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndPointCryptosServer).EditCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndPointCryptos/EditCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndPointCryptosServer).EditCrypto(ctx, req.(*EditCryptoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndPointCryptos_DeleteCrypo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCryptoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndPointCryptosServer).DeleteCrypo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndPointCryptos/DeleteCrypo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndPointCryptosServer).DeleteCrypo(ctx, req.(*DeleteCryptoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndPointCryptos_FindCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCryptoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndPointCryptosServer).FindCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndPointCryptos/FindCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndPointCryptosServer).FindCrypto(ctx, req.(*FindCryptoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndPointCryptos_ListAllCryptos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SortCryptosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndPointCryptosServer).ListAllCryptos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndPointCryptos/ListAllCryptos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndPointCryptosServer).ListAllCryptos(ctx, req.(*SortCryptosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndPointCryptos_Upvote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndPointCryptosServer).Upvote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndPointCryptos/Upvote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndPointCryptosServer).Upvote(ctx, req.(*VoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndPointCryptos_Downvote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndPointCryptosServer).Downvote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndPointCryptos/Downvote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndPointCryptosServer).Downvote(ctx, req.(*VoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndPointCryptos_MonitorVotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorVotesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EndPointCryptosServer).MonitorVotes(m, &endPointCryptosMonitorVotesServer{stream})
}

type EndPointCryptos_MonitorVotesServer interface {
	Send(*CryptoCurrency) error
	grpc.ServerStream
}

type endPointCryptosMonitorVotesServer struct {
	grpc.ServerStream
}

func (x *endPointCryptosMonitorVotesServer) Send(m *CryptoCurrency) error {
	return x.ServerStream.SendMsg(m)
}

// EndPointCryptos_ServiceDesc is the grpc.ServiceDesc for EndPointCryptos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EndPointCryptos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EndPointCryptos",
	HandlerType: (*EndPointCryptosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCrypto",
			Handler:    _EndPointCryptos_CreateCrypto_Handler,
		},
		{
			MethodName: "EditCrypto",
			Handler:    _EndPointCryptos_EditCrypto_Handler,
		},
		{
			MethodName: "DeleteCrypo",
			Handler:    _EndPointCryptos_DeleteCrypo_Handler,
		},
		{
			MethodName: "FindCrypto",
			Handler:    _EndPointCryptos_FindCrypto_Handler,
		},
		{
			MethodName: "ListAllCryptos",
			Handler:    _EndPointCryptos_ListAllCryptos_Handler,
		},
		{
			MethodName: "Upvote",
			Handler:    _EndPointCryptos_Upvote_Handler,
		},
		{
			MethodName: "Downvote",
			Handler:    _EndPointCryptos_Downvote_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MonitorVotes",
			Handler:       _EndPointCryptos_MonitorVotes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
